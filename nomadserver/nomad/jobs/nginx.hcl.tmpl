job "nginx" {
  datacenters = ["dc1"]

  group "nginx" {
    network {
      mode = "bridge"
      port "http" {
        static = 80
      }
      port "https" {
        static = 443
      }
    }

    volume "nginx-etc-letsencrypt" {
      type      = "host"
      read_only = false
      source    = "nginx-etc-letsencrypt"
    }

    service {
      name = "nginx"

      connect {
        sidecar_service {
          proxy {
            upstreams {
              destination_name = "docker-registry"
              local_bind_port  = 3000
            }
            upstreams {
              destination_name = "rails"
              local_bind_port  = 3001
            }
          }
        }
      }
    }

    task "nginx" {
      driver = "docker"

      volume_mount {
        volume      = "nginx-etc-letsencrypt"
        destination = "/etc/letsencrypt"
        read_only   = false
      }

      config {
        image = "nginx"

        ports = ["http", "https"]

        volumes = [
          "local:/etc/nginx/conf.d",
        ]
      }

      resources {
        cpu    = 1500 # sized to take up the given linode, minus envoy proxy
        memory = 1500
      }

      env {
        WIKIED_DOCKER_DN = "${ docker_domain }"
        WIKIED_RAILS_DN = "${ rails_domain }"
      }

      template {
        data = <<EOF
upstream docker {
  server {{ or (env "NOMAD_UPSTREAM_ADDR_docker_registry") "127.0.0.1" }};
}

upstream rails {
  server {{ or (env "NOMAD_UPSTREAM_ADDR_rails") "127.0.0.1" }};
}

server {
  listen 80;
  server_name {{ or (env "WIKIED_DOCKER_DN") "127.0.0.1" }};

  location /.well-known/acme-challenge/ {
    root /etc/letsencrypt/var/{{ or (env "WIKIED_DOCKER_DN") "127.0.0.1" }}/certbot;
  }
}

server {
  listen 80;
  server_name {{ or (env "WIKIED_RAILS_DN") "127.0.0.1" }};

  location /.well-known/acme-challenge/ {
    root /etc/letsencrypt/var/{{ or (env "WIKIED_RAILS_DN") "127.0.0.1" }}/certbot;
  }
}


server {
  listen 443 ssl;
  server_name {{ or (env "WIKIED_DOCKER_DN") "127.0.0.1" }};

  client_max_body_size 0;
  chunked_transfer_encoding on;

  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  ssl_certificate /etc/letsencrypt/main/{{ or (env "WIKIED_DOCKER_DN") "127.0.0.1" }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/main/{{ or (env "WIKIED_DOCKER_DN") "127.0.0.1" }}/privkey.pem;

  location / {
    proxy_set_header  Host              $http_host;
    proxy_set_header  X-Real-IP         $remote_addr;
    proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;
    proxy_read_timeout                  900;
    proxy_pass http://docker;
  }
}

server {
  listen 443 ssl;
  server_name {{ or (env "WIKIED_RAILS_DN") "127.0.0.1" }};

  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  ssl_certificate /etc/letsencrypt/main/{{ or (env "WIKIED_RAILS_DN") "127.0.0.1" }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/main/{{ or (env "WIKIED_RAILS_DN") "127.0.0.1" }}/privkey.pem;

  location / {
    proxy_set_header  Host              $http_host;
    proxy_set_header  X-Real-IP         $remote_addr;
    proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;
    proxy_pass http://rails;
  }
}
EOF

        destination   = "local/load-balancer.conf"
        change_mode   = "signal"
        change_signal = "SIGHUP"
      }
    }
  }
}